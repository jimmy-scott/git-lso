#!/usr/bin/python

# Copyright (C) 2012 Jimmy Scott #jimmy#inet-solutions#be#. Belgium.
# All rights reserved.

import os
import sys
import re
import zlib
import getopt


class GitRepo(object):
	"""Holds git repository data"""
	
	def __init__(self, repo, bare=False):
		"""Init variables"""
		
		self.error = None
		self.repo = repo
		self.bare = bare
		self.objects = []
		self.object_dirs = []
		
		if bare:
			self.git_dir = repo
		else:
			self.git_dir = os.path.join(repo, ".git")
		
		self.objects_root = os.path.join(self.git_dir, "objects")
	
	def is_bare(self):
		"""Return self.bare"""
		
		return self.bare
	
	def get_error(self):
		"""Return self.error"""
		
		return self.error
	
	def reset_error(self):
		"""Reset the error status"""
		
		self.error = None
	
	def verify(self):
		"""Verify if self.objects_root exists and is a directory"""
		
		if not os.path.exists(self.objects_root):
			self.error = "no such directory: %s" % \
				self.objects_root
			return False
		
		if not os.path.isdir(self.objects_root):
			self.error = "not a directory: %s" % \
				self.objects_root
			return False
		
		return True
	
	def populate_objects(self):
		"""Gather a list of objects"""
		
		# Don't populate if already done
		if self.objects:
			return
		
		self.object_dirs = []
		dir_regex = re.compile("^[0-9a-f]{2}$")
		file_regex = re.compile("^[0-9a-f]{38}$")
		
		# Get list of object dirs
		for o_dir in os.listdir(self.objects_root):
			o_dir_path = os.path.join(self.objects_root, o_dir)
			if re.match(dir_regex, o_dir) and os.path.isdir(o_dir_path):
				# Looks like an object dir so far
				self.object_dirs.append((o_dir, o_dir_path))
		
		# Get list of object files
		for o_dir, o_dir_path in self.object_dirs:
			for o_file in os.listdir(o_dir_path):
				o_file_path = os.path.join(o_dir_path, o_file)
				if re.match(file_regex, o_file) and os.path.isfile(o_file_path):
					# Looks like an object file so far
					self.objects.append({
						'o_id': o_dir + o_file,
						'o_path': o_file_path,
						#'o_relpath': o_dir + "/" + o_file
					})


def sysexit(msg, excode=70):
	sys.stderr.write("%s: %s\n" % (sys.argv[0], msg))
	sys.exit(excode)


def process_repo(repo):
	"""TODO"""
	
	# Verify it looks like a valid repo
	if not repo.verify():
		errmsg = "%s" % repo.get_error()
		if not repo.is_bare():
			errmsg += "\n\nMaybe you forgot --bare?"
		sysexit(errmsg, 65)
	
	# Populate objects
	repo.populate_objects()


def usage(errmsg=None):
	if errmsg is not None:
		sys.stderr.write("%s: %s\n" % (sys.argv[0], errmsg))
	sys.stderr.write("usage: %s [--bare] [<git-repo-root>]\n" %
		sys.argv[0])
	sys.exit(64)


def main():
	opts = "h"
	long_opts = ['help', 'bare']
	bare = False
	
	# Get options and arguments
	try:
		opts, args = getopt.getopt(sys.argv[1:], opts, long_opts)
	except getopt.GetoptError, error:
		usage(error)
	
	# Process options
	for opt, arg in opts:
		if opt == "--bare":
			bare = True
		elif opt in ('-h', '--help'):
			usage()
		else:
			assert False, "unhandled option"
	
	# Process arguments
	if args:
		repo = args.pop(0)
	else:
		repo = os.curdir
	
	# No args should be left
	if args:
		usage("too many arguments: %s" % str.join(', ', args))
	
	# Create object and process repo
	repo = GitRepo(repo, bare)
	process_repo(repo)


if __name__ == "__main__":
	main()

